
# Creating Liferay Themes 

Themes are hot deployable plugins which can completely transform the look and
feel of the portal. Theme creators can make themes to provide an interface that
is unique to the site that the portal will serve. Themes make it possible to
change the user interface so completely that it would be difficult or impossible
to tell that the site is running on Liferay. Liferay provides a well organized,
modular structure to its themes. This allows the theme developer to be able to
quickly modify everything from the border around a portlet window to every
object on the page, because all of the objects are easy to find. Additionally,
theme developers do not have to customize every aspect of their themes. A theme
can inherit the styling, images, and templates from any of the built in themes,
overriding them only where necessary. This allows themes to be smaller and less
cluttered with extraneous data that already exists in the default theme (such as
graphics for emoticons for the message boards portlet).

## Introduction 

Liferay's themes are designed in such way that they can be very easy to create.
You can start by making changes in CSS files and as your customization
requirements grow you can also make changes to the HTML that controls the page
design.

Some of the technologies that you may need to know in order to make the best use
of themes are:

- **CSS:** If desired you can create a whole new theme just by changing a CSS
file.

- **Velocity:** a simple yet powerful tool to create templates. You will need to
use it in order to customize the HTML generated by the theme.

-   **JavaScript:** can be used to add special behaviors.

- **XML:** each theme has a configuration file written in XML. You will use this
file to specify some settings of the theme.

To follow the examples of this guide you will also need some familiarity with
using the command line. Alternatively you can use the Liferay IDE and use its
menus instead of the commands used in the text.

## Creating a Theme 

The process for creating a new theme is nearly identical to the one for making a
portlet. You will need both a project name (without spaces) and a display name
(which can have spaces). For example, the project name could be *deep-blue*, and
the theme title *Deep Blue*. We will show two ways to accomplish this. First, we
will demonstrate by using Liferay Developer Studio.

***Using Developer Studio:*** Go to File &rarr; New &rarr; Liferay Project

Next, go through the following steps to setup your new theme:

1. Fill in *deep-blue* for the Project name and *Deep Blue* for the Display name
2. Select the Liferay Plugins SDK and Portal Runtime you've configured
3. Select *Theme* for your Plugin type
4. Click *Finish*

![Figure 4.1: Creating your theme plugin](../../images/05-themes-1.png)

When creating a new plugin in Developer Studio, we can either create a
completely new plugin or add a new plugin to an existing plugin project.

***Using the terminal:*** Navigate to the *themes* directory in the Plugins SDK
and enter the following command (Linux and Mac OS X):

    ./create.sh deep-blue "Deep Blue"

On Windows enter the following instead:

    create.bat deep-blue "Deep Blue"

This command will create a blank theme in your *themes* folder. Notice that the
Plugins SDK automatically appends "-theme" to the project name when creating
this folder. When you initially create your theme, it will be empty. But later,
when you run `ant deploy`, all the files and folders of the theme will be
populated.

### Setting a base Theme 

All themes in Liferay are built on top of the *_unstyled* and *_styled* themes,
which contain very limited styling. By default, when you create a theme, it will
be built with only these as a base, however, you can set an *existing* theme as
your base theme, so that you can gain the additional styling from that theme as
well as the elements for *_styled* and *_unstyled*.

When a theme is built, the base themes are added in layers - first *_unstyled*
is added, giving you the core of the theme, and *_styled* is added on top of
that, adding the most basic elements. If you use a different base theme, that
will be added on top of *_styled* - overriding the default styling wherever
applicable. After the base themes are added, your own custom styling is added on
top of that.

If you want to use a different base theme than the default, you can edit the
`build.xml` file and change *_styled* in `<property name="theme.parent" value="_styled>`
to the name of any theme currently available in your environment that you wish
to use.

### Deploying the Theme 

***To deploy in Developer Studio:*** Click and drag your theme project onto your
server.

![Figure 4.2: Drag and drop your theme onto the server](../../images/05-themes-6.png)

Upon deploying your plugin, your server will output messages indicating your
plugin is read, registered, and now available for use.

	Reading plugin package for deep-blue-theme
	Registering themes for deep-blue-theme
	1 theme for deep-blue-theme is available for use

***To deploy using the terminal:*** Open a terminal window in your
`themes/deep-blue-theme` directory and enter this command:

    ant deploy

You should get a BUILD SUCCESSFUL message, which means that your theme is now
being deployed. If you switch to the terminal window running Liferay, and wait
for a few seconds, you should see the message *1 theme for deep-blue-theme is
available for use*.

Go to your web browser and login to the portal as explained earlier. Then hover
over **Manage** at the top of the page, and click on *Page*. Directly underneath
the words **Manage Pages** select the *Look and Feel* tab. Simply click on your
theme to activate it.

## Anatomy of a Theme 

Custom themes are based on differences from one of several built-in Liferay
themes.

The structure of a theme is designed to separate different types of resources
into easily accessible folders. The full structure of the deep blue theme is
shown below:

-	deep-blue-theme/
	-	docroot/
		-	WEB-INF/
			-	liferay-plugin-package.properties
		-	_diffs/ (subfolders not created by default)
			-	css/
			-	images/
			-	js/
			-	templates/
		-	css/
			-	application.css
			-	base.css
			-	custom.css
			-	dockbar.css
			-	extras.css
			-	forms.css
			-	layout.css
			-	main.css
			-	navigation.css
			-	portlet.css
		-	images/
			-	(many directories)
		-	js/
			-	main.js
		-	templates/
			-	init_custom.vm
			-	navigation.vm
			-	portal_normal.vm
			-	portal_pop_up.vm
			-	portlet.vm

You will notice that there is a `_diffs` folder inside the `docroot` directory
of your theme; this is where you will place your theme code. You only need to
customize the parts of your theme that will differ from the parent theme. To do
this, you mirror the directory structure of the parent theme inside of the
`_diffs` folder, placing only the folders and files you need to customize there.

You will also notice that there are several other folders inside `docroot`;
these were copied over from the parent theme in your Liferay bundle when you
deployed your theme. You should use these files as the basis for your
modifications. For example, to customize the navigation, you would copy
`navigation.vm` from `deep-blue-theme/docroot/templates/navigation.vm` into
`deep-blue-theme/docroot/_diffs/templates` folder (you may have to create this
folder first). You can then open this file and customize it to your liking. Here
is a snapshot of your *Package Explorer* located in Developer Studio.

![Figure 4.3: The theme's Package Explorer](../../images/05-themes-3.png)

For custom styles, create a folder named `css` inside your `_diffs` folder and
place a single file there called `custom.css`. This is where you would put all
of your new styles and all of your overrides of the styles in the parent theme.
`custom.css` is loaded last, and so styles in this file are able to override any
styles in the parent theme.

Best practice recommends that you make all your custom theme styles using only
the `custom.css` file, and that you not override any of the templates unless
absolutely necessary. This will make future upgrades far easier, as you won't
have to manually modify your templates to add support for new Liferay features.

Whenever you make modifications to your theme in Developer Studio, redeploy it
by right clicking your theme located underneath your server, and selecting
*Redeploy*.

![Figure 4.4: How to redeploy your theme plugin](../../images/05-themes-2.png)

If you are using the terminal window, redeploy it by opening a terminal in
`themes/deep-blue-theme` and enter this command:

	ant deploy 

Wait a few seconds until the theme deploys, and then refresh your browser to see
your changes.

---

 ![tip](../../images/tip-pen-paper.png)**Tip:** If you wish to see changes even
 more quickly, it is also possible to modify your theme directly in your Liferay
 bundle. In our example, `custom.css` is located in
 `liferay-portal-[version]/tomcat-[tomcat-version]/webapps/deep-blue-theme/css`.
 However, for modifications made here to appear in your browser as soon as you
 refresh the page, you must enable Liferay Developer Mode. See the Liferay wiki
 for more information.

---

Also make sure that you copy any changes you make back into your *_diffs*
folder, or they will be overwritten when you redeploy your theme.

## Thumbnails 

You will notice that in the *Look and Feel* settings the *Classic* theme has a
thumbnail preview of what it looks like, while our theme has only a broken
image. To correct this, take a screenshot of your theme and save it in
`_diffs/images` with the name `thumbnail.png`. It must have the exact size of
150 pixels wide by 120 pixels high. You should also save a larger version in the
same directory with the name `screenshot.png`. Its size must be exactly 1080
pixels wide by 864 pixels high. After redeploying your theme, it will have a
thumbnail preview just like the *Classic* theme.

## JavaScript 

Liferay now includes its own JavaScript library called Alloy, which is an
extension to Yahoo's YUI3 framework. Developers can take advantage of the full
power of either of these frameworks in their themes. Inside of your theme's
`main.js` file, you will find definitions for three JavaScript callbacks:

![Figure 4.5: Content of main.js](../../images/05-themes-4.png)

-   **AUI().ready(fn);**

This callback is executed as soon as the HTML in the page has finished loading
(minus any portlets loaded via AJAX).

-   **Liferay.Portlet.ready(fn);**

Executed after each portlet on the page has loaded. The callback receives two
parameters: `portletId` and `node`. `portletId` is the ID of the portlet that
was just loaded. `node` is the Alloy Node object of the same portlet.

-   **Liferay.on('allPortletsReady', fn);**

Executed after everything -- including AJAX portlets -- has finished loading.

## Settings 

Each theme can define settings to make it configurable. These settings are
defined in a file named `liferay-look-and-feel.xml` inside `WEB-INF`. This file
does not exist by default, so you should now create it with the following
content:

    <?xml version="1.0"?>
    <!DOCTYPE look-and-feel PUBLIC "-//Liferay//DTD Look and Feel 6.1.0//EN"
    "http://www.liferay.com/dtd/liferay-look-and-feel_6_1_0.dtd">

    <look-and-feel>
		<compatibility>
			<version>6.1.10+</version>
		</compatibility>
		<theme id="deep-blue" name="Deep Blue">
			<settings>
				<setting key="my-setting" value="my-value" />
			</settings>
		</theme>
    </look-and-feel>

You can define additional settings by adding more `<setting>` elements. These
settings can be accessed in the theme templates using the following code:

    $theme.getSetting("my-setting")

For example, say we need to create two themes that are exactly the same except
for some changes in the header. One of the themes has more details while the
other is smaller (and takes less screen real estate). Instead of creating two
different themes, we are going to create only one and use a setting to choose
which header we want.

In the `portal_normal.vm` template we could write:

    #if ($theme.getSetting("header-type") == "detailed")
		#parse ("$full_templates_path/header_detailed.vm")
    #else
		#parse ("$full_templates_path/header_brief.vm")
    #end

Then when we write the `liferay-look-and-feel.xml`, we write two different
entries that refer to the same theme but have a different value for the
header-type setting:

    <theme id="deep-blue" name="Deep Blue">
		<settings>
			<setting key="header-type" value="detailed" />
		</settings>
		</theme>
			<theme id="deep-blue-mini" name="Deep Blue Mini">
		<settings>
			<setting key="header-type" value="brief" />
		</settings>
    </theme>

You can also make your settings configurable from within Liferay portal. Let's
say you want to provide options to turn certain theme features on or off or that
you want to allow a user to provide input to a theme setting. You can do just
that by using *configurable* settings.

For example, you could create an option to display a slogan next to your
company's name in the footer of your site's pages. Here is how you do it:

First, you insert logic into your `portal_normal.vm` template to display a
slogan along with your company's name (e.g. Nosester) in the footer of your site
pages.

	<footer id="footer" role="contentinfo">
		<p>
			#if($theme.getSetting("display-slogan-footer") == true)
				Nosester $theme.getSetting("slogan")
			#else
				Nosester
			#end
		</p>
	</footer>

Note in the above logic, the following theme setting variables:

* **display-slogan-footer:** holds a boolean value indicating whether to display
the version of the footer that contains your slogan.

*	**slogan:** holds your slogan text.

Next, you declare the two theme setting variables in your
`liferay-look-and-feel.xml` found in your theme's `WEB-INF` folder.

	<settings>
		<setting configurable="true" key="slogan" type="textarea" value=""></setting>
		<setting configurable="true" key="display-slogan-footer" type="checkbox" value="true"></setting>
	</settings>

The portal administrator can input a slogan and activate it for the portal via
the *Look and Feel* section of the *Manage Site Pages* panel (see the *Creating
sites and managing pages* section of [Using Liferay Portal](http://www.liferay.com/documentation/liferay-portal/6.1/user-guide/-/ai/managing-pages-in-liferay-port-1)).

![Figure 4.6: Setting the footer display slogan in the *Look and Feel* of  the site's page settings.](../../images/themes-custom-configurable-setting.png)

Then, when the portal administrator saves these settings, the site's pages
display the new footer containing the slogan.

![Figure 4.7: The slogan displayed in the page footer.](../../images/themes-custom-configurable-setting-displayed.png)


 ![note](../../images/tip-pen-paper.png)**Note:** A language properties hook
 should be used to properly display configurable theme settings, such as the
 slogan text area and footer checkbox from the previous example. For details, 
 see the [Overriding a *Language.properties* File](https://www.liferay.com/documentation/liferay-portal/6.1/development/-/ai/overriding-a-%3Cem%3Elanguage-properties-lt-em-gt-fi-1)
 section found in the *Hooks* chapter of this guide.

Next, we'll take a look at how to manage color schemes in your theme.

## Color Schemes 

Color schemes are specified using a CSS class name, with which you can not only
change colors, but also choose different background images, different border
colors, and so on.

In your `liferay-look-and-feel.xml`, you can define color schemes like so:

    <theme id="deep-blue" name="Deep Blue">
		<settings>
			<setting key="my-setting" value="my-value" />
		</settings>
		<color-scheme id="01" name="Day">
			<css-class>day</css-class>
			<color-scheme-images-path>${images-path}/color_schemes/${css-class}</color-scheme-images-path>
		</color-scheme>
		<color-scheme id="02" name="Night">
			<css-class>night</css-class>
		</color-scheme>
    </theme>

Inside of your `_diffs/css` folder, create a folder called `color_schemes`.
Inside of that folder, place a `.css` file for each of your color schemes. In
the case above, we could either have just one called `night.css` and let the
default styling handle the first color scheme, or you could have both `day.css`
and `night.css`.

Assuming you follow the second route, place the following lines at the bottom of
your `custom.css` file:

    @import url(color_schemes/day.css);
    @import url(color_schemes/night.css);

The color scheme CSS class is placed on the `<body>` element, so you can use it
to identify you styling. In `day.css` you would prefix all of your CSS styles
like this:

    body.day { background-color: #ddf; }
    .day a { color: #66a; }

And in `night.css` you would prefix all of your CSS styles like this:

    body.night { background-color: #447; color: #777; }
    .night a { color: #bbd; }

You can also create separate thumbnail images for each of your color schemes.
The `<color-scheme-images-path>` element tells Liferay where to look for these
images (note that you only have to place this element in one of the color
schemes for it to affect both). For our example, create the folders
`_diffs/images/color_schemes/day` and `_diffs/images/color_schemes/night`. In
each of these folders place a `thumbnail.png` and `screenshot.png` file with the
same sizes as before.

## Portal Predefined Settings 

The portal defines some settings that allow the theme to determine certain
behaviors. So far there are only two predefined settings but this number may
grow in the future. These settings can be modified from
`liferay-look-and-feel.xml`.

If set to `false`, the portal will turn off borders by default for all the
portlets. The default is `true`.

Example:

    <settings>
		<setting key="portlet-setup-show-borders-default" value="false" />
    </settings>

This default behavior can be overridden for individual portlets using:

* `liferay-portlet.xml`

* Portlet CSS popup setting

This setting is used by the *Navigation* portlet to determine the CSS class name
of the list of pages. The value must be a comma separated list of valid bullet
styles to be used.

Example:

    <settings>
		<setting key="bullet-style-options" value="classic,modern,tablemenu" />
    </settings>

The bullet style can be changed by the user in the *Navigation* portlet
configuration. The chosen style will be applied as a CSS class on the `<div>`
containing the navigation. This class will be named in the following pattern:

    .nav-menu-style-{BULLET_STYLE_OPTION} {
		... CSS selectors ...
    }

Here is an example of the HTML code that you would need to add style through CSS
code. In this case the bullet style option is **modern**:

    <div class="nav-menu nav-menu-style-modern">
		<ul class="breadcrumbs lfr-component">
			...
		</ul>
    </div>

Using CSS and/or some unobtrusive Javascript it's possible to implement any type
of menu.

## Theme inheritance 

By default, themes are based on the **_styled** theme, which provides only basic
styling of portlets. If you open the `build.xml` file in your theme's directory
using the Build Application Configuration Editor , you will see the following:

![Figure 4.8: Content of build.xml](../../images/05-themes-5.png)

The `theme.parent` property determines which built-in theme your theme will
inherit from. In addition to the **_styled** theme, you may also choose to
inherit from the **_unstyled** theme, which contains no styling whatsoever. This
involves more work, but in exchange you get full flexibility to design your own
CSS files from scratch.

You can also use the default Liferay theme, called **classic**, as the parent of
your themes. Using this approach allows you to start with a look and feel that
already works and gets nice results quickly. The drawback is that since there is
so much already done for you, there won't be as much flexibility to build the
desired design. It's a compromise between creating a theme as quickly as
possible versus having full control of the result. It's your choice.

## Resources Importer

The resources importer application is a tool provided by Liferay that allows a
theme developer to have files and web content automatically imported into the
portal when a theme is deployed. Usually, the resources are imported into a site
template but they can also be imported directly into a site. Portal
administrators can use the site or site template created by the resources
importer to showcase the theme. This is a great way for theme developers to
provide a sample context that optimizes the design of their theme. In fact, all
standalone themes that are uploaded to Liferay Marketplace must use the
resources importer. This ensures a uniform experience for Marketplace users: a
user can download a theme from Marketplace, install it on their portal, go to
Sites or Site Templates in the Control Panel and immediately see their new theme
in action. In this section, we discuss how you can use the resources importer to
import resources when your own themes are deployed.

Liferay's welcome theme includes resources that the resource importer
automatically deploys to the default site. (Note: The welcome theme was
introduced in Liferay 6.1 is only applied out-of-the-box in Liferay CE.) The
welcome theme and the pages and content that it imports to the default site
provide a good example of the resource importer's functionality.

![Figure 4.x: The welcome theme uses the resources importer to import pages and
content to the default site of a fresh Liferay
installation.](../../images/welcome-theme.png)

If it's not already installed, you can download the resources importer
application from Liferay Marketplace. Search for either *Resources Importer CE*
or Resources Importer EE*, depending on your Liferay Portal platform, and
download the latest version. Deploy the resources importer to your Liferay
instance the same way you would deploy any other Liferay plugin.

---

 ![tip](../../images/tip-pen-paper.png)**Tip:** If you deploy a theme to your
 Liferay Portal instance and don't have the resources importer already deployed,
 you might see a message like this:
 
	19:21:12,224 INFO  [pool-2-thread-2][HotDeployImpl:233] Queueing test-theme
	for deploy because it is missing resources-importer-web

 Such as message appears if the resources importer is declared as a dependency
 in your theme's `liferay-plugin-package.properties` file. You can deploy the
 resources importer application to satisfy the dependency or you can remove or
 comment out the dependency declaration if you're not going to use the resources
 importer with your theme (see below).

---

When you create a new theme project using the Liferay Plugins SDK, check your
theme's `/docroot/WEB-INF/liferay-plugin-package.properties` file for two
entries related the resources importer. One or both of these might be commented
out or missing, depending on the version of your Plugins SDK:

	required-deployment-contexts=\
	    resources-importer-web
	
	resources-importer-developer-mode-enabled=true

The first entry, `required-deployment-contexts=resources-importer-web`, declares
a dependency between your theme and the resources importer plugin. If you're not
going to use the resources importer with your theme and don't want to deploy the
resources importer, you can remove or comment out this entry. The second entry,
`resources-importer-developer-mode-enabled=true`, is a convenience feature for
theme developers. This setting allows the site template associated with your
theme's resources importer to be recreated without having to delete the sites
that are using the site template. Without enabling this setting, a theme
developer would have to manually delete the sites built using the resource
importer's site template each time anything in the theme's
`/WEB-INF/src/resources-importer` folder changed.

If you'd like to import your theme's resources directly into a site, instead of
into a site template, you can add the following two lines to your
`liferay-plugin-package.properties` file:

	resources-importer-target-class-name=com.liferay.portal.model.Group

	resources-importer-target-value=<site-name>

---

 ![tip](../../images/tip-pen-paper.png)**Warning:** If you're developing themes
 for Liferay Marketplace, don't configure your theme to import resources
 directly into a site. Instead, use the default: import the resources into a
 site template. This way, it'll be much safer to deploy your theme to a
 production Liferay instance.

---

All of the resources that a theme uses with the resource importer go in the
`<theme-name>/WEB-INF/src/resources-importer` folder. Usually, a JSON file named
`sitemap.json` in this folder specifies the site pages, layout templates, web
content, assets, and portlet configurations provided with the theme. This file
describes the contents and hierarchy of the site and allows Liferay to import it
as a site or site template. Even if you're not familiar with JSON, the
`sitemap.json` file is easy to understand.  Let's examine a sample
`sitemap.json` file:

	{
		"layouts": [
			{
				"columns": [
					[
						{
							"portletId": "58"
						},
						{
							"portletId": "71"
						},
						{
							"portletId": "56",
							"portletPreferences": {
								"articleId": "Without Border.html",
								"groupId": "${groupId}",
								"portletSetupShowBorders": "false"
							}
						},
						{
							"portletId": "56",
							"portletPreferences": {
								"articleId": "Custom Title.html",
								"groupId": "${groupId}",
								"portletSetupShowBorders": "true",
								"portletSetupTitle_en_US": "Web Content Display with Custom Title",
								"portletSetupUseCustomTitle": "true"
							}
						}
					],
					[
						{
							"portletId": "47"
						},
						{
							"portletId": "71_INSTANCE_${groupId}",
							"portletPreferences": {
								"displayStyle": "[custom]",
								"headerType": "root-layout",
								"includedLayouts": "all",
								"nestedChildren": "1",
								"rootLayoutLevel": "3",
								"rootLayoutType": "relative"
							}
						},
						"Web Content with Image.html",
						{
							"portletId": "118",
							"portletPreferences": {
								"columns": [
									[
										{
											"portletId": "56",
											"portletPreferences": {
												"articleId": "Child Web Content 1.xml",
												"groupId": "${groupId}",
												"portletSetupShowBorders": "true",
												"portletSetupTitle_en_US": "Web Content Display with Child Structure 1",
												"portletSetupUseCustomTitle": "true"
											}
										}
									],
									[
										{
											"portletId": "56",
											"portletPreferences": {
												"articleId": "Child Web Content 2.xml",
												"groupId": "${groupId}",
												"portletSetupShowBorders": "true",
												"portletSetupTitle_en_US": "Web Content Display with Child Structure 2",
												"portletSetupUseCustomTitle": "true"
											}
										}
									]
								],
								"layoutTemplateId": "2_columns_i"
							}
						}
					]
				],
				"friendlyURL": "/home",
				"name": "Welcome",
				"title": "Welcome"
			},
			{
				"columns": [
					[
						{
							"portletId": "58"
						}
					],
					[
						{
							"portletId": "47"
						}
					]
				],
				"friendlyURL": "/parent-page",
				"layouts": [
					{
						"friendlyURL": "/child-page-1",
						"name": "Child Page 1",
						"title": "Child Page 1"
					},
					{
						"friendlyURL": "/child-page-2",
						"name": "Child Page 2",
						"title": "Child Page 2"
					}
				],
				"name": "Parent Page",
				"title": "Parent Page"
			},
			{
				"friendlyURL": "/hidden-page",
				"name": "Hidden Page",
				"title": "Hidden Page",
				"hidden": "true"
			}
		],
		"layoutTemplateId": "2_columns_ii"
	}

The first thing you should declare in `sitemap.json` is a layout template ID so
that your site or site template knows which layout template to use for its
pages. (In the above example, this declaration is actually at the end of the
file.) You can also specify different layout templates to use for individual
pages. You can find layout templates in your Liferay installation's `/layouttpl`
folder. Next, you have to declare the layouts, or pages, that your site template
should use. Note that pages are called *layouts* in Liferay's code. You can
specify a name, title, and friendly URL for a page, and you can set a page to be
hidden. To declare that web content should be displayed on a page, simply
specify an HTML file.  You can declare portlets by specifying their portlet IDs
which can be found in Liferay's `WEB-INF/portlet-custom.xml` file. You can also
specify portlet preferences for each portlet.

Once you've added your resources to the
`<theme-name>/WEB-INF/src/resources-importer` folder and referenced these
resources in `sitemap.json`, you're ready to deploy your theme. Alternatively,
you can use an `archive.lar` file to package the resources you'd like your theme
to deploy. To create such an `archive.lar`, just export the contents of a site
using the site scope. Then place this `archive.lar` file in your theme's
`<theme-name>/docroot/WEB-INF/src/resources-importer` folder. If you choose to
use an archive file to package all of your resources, you won't need a
`sitemap.json` file or any other files in your
`<theme-name>/docroot/WEB-INF/src/resources-importer` folder. Note, however,
that LAR files are version-specific; they won't work on any version of Liferay
other than the one from which they were exported. For this reason, using the
`sitemap.json` file to specify specific resources is the most flexible approach.
If you're developing themes for Liferay Marketplace, you should use the
`sitemap.json` to specify resources to be imported alongside your theme.
Whichever approach you take, once your theme has been deployed, you can log in
to your portal as an administrator and check the Sites or Site Templates section
of the Control Panel to make sure that your resources were deployed correctly.
If you used the default setting (to create a site template), you can either view
the site template pages directly or you can create a new site based on the site
template to see your theme in the context for which you designed it.

To see a simple working example of the resources importer in action, visit
[https://github.com/liferay/liferay-docs/tree/master/devGuide/code/test-resources-importer-theme-6.1.1.1.war](https://github.com/liferay/liferay-docs/tree/master/devGuide/code/test-resources-importer-theme-6.1.1.1.war).
This is just the classic Liferay theme with some sample resources added. If
you're interested in extending the functionality of the resources-importer
application, you can use the test-resources-importer-portlet to check that you
aren't breaking existing functionality. The test-resources-importer-portlet is
available on Github here:
[https://github.com/liferay/liferay-plugins/tree/master/portlets/test-resources-importer-portlet](https://github.com/liferay/liferay-plugins/tree/master/portlets/test-resources-importer-portlet).
Note that the sample resources included in the test-resources-importer-theme are
the same ones included in the test-resources-importer-portlet. If you'd like to
examine another example, check out the code for Liferay's welcome theme:
[https://github.com/liferay/liferay-plugins/tree/master/themes/welcome-theme](https://github.com/liferay/liferay-plugins/tree/master/themes/welcome-theme).
Note that this theme imports resources directly into the default site.
Typically, this won't be something you'll need to do; instead, you'll usually
have your theme's resources imported into a site template.
