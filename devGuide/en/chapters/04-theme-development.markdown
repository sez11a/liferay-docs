# Creating Liferay Themes

Do you want to transform the look and feel of your Liferay Portal? Create your
own Liferay Theme! Themes are hot deployable plugins unique to a site served by
the portal. With themes, you can alter the user interface so completely that
it's difficult or impossible to tell that the site is running on Liferay. 

Liferay provides a well organized, modular structure to its themes.  Themes
follow the same philosophy as Liferay configuration: they are modifications, or
differences from the default. Because of this, every line of markup and every
style has a default value that your theme can fall back on if you have chosen
not to customize it. In other words, your theme inherits the styling, images,
and templates from any of the built in themes. This saves you time and keeps
your themes smaller and less cluttered, because your theme contains only its own
resources, using defaults for the rest, like emoticon graphics for the message
boards portlet. 

In this chapter you'll learn all about Liferay themes:

- Creating a Theme

- Anatomy of a Theme

- Developer Mode

- Thumbnails

- JavaScript

- Settings

- Color Schemes

- Portal Predefined Settings

- Theme Inheritance

Liferay themes are easy to create. You can start by making changes only in the
CSS files. When you need to customize themes more extensively, you can change
the HTML. 

If you hope to become a theme customization guru, there are several technologies
you should know: 

- *CSS:* Create a new theme simply by modifying a CSS file. 

- *Velocity:* Customize the markup generated by the theme.

- *JavaScript:* Add special behaviors to your theme. 

- *XML:* Some theme settings are specified in XML.

To follow the examples in this guide, you should be familiar with the command
line or the Liferay IDE. 

Let's create a theme! 

## Creating a Theme

The theme creation process is nearly identical to the portlet creation process
that we covered in the last chapter. Our theme will be named *Deep Blue*, so the
project name (without spaces) is *deep-blue*, and the display name (which can
have spaces) is *Deep Blue*. Let's create the theme using Liferay Developer
Studio first, and then with the terminal. 

***Using Developer Studio:*** 

1. Go to File &rarr; New &rarr; Liferay Project. 

2. Next, go through the following steps to set up your new theme:

    2.1. Fill in *deep-blue* for the Project name and *Deep Blue* for the
    Display name. 

    2.2. Select the Liferay Plugins SDK and Portal Runtime you've configured. 

    2.3. Select *Theme* for your Plugin type. 

    2.4. Click *Finish*. 

![Figure 4.1: Creating your theme plugin](../../images/05-themes-1.png)

With Developer Studio, you can create a new plugin project, or if you already
have a project, create a new plugin in an existing project. A single Liferay
project can contain multiple plugins.  

***Using the terminal:*** Navigate to the `themes` directory in the Plugins SDK
and enter the appropriate command for your operating system:

1. In Linux and Mac OS X, enter

    ./create.sh deep-blue "Deep Blue"

2. In Windows, enter

    create.bat deep-blue "Deep Blue"

Now there's a blank theme in your `themes` folder, which the Plugins SDK
automatically named by appending "-theme" to your project name. Right now your
theme is empty. Your next step is to set a base theme that serves as the default
for your theme. 

### Setting a base Theme

All themes in Liferay are built on top of two base themes, named *_unstyled* and
*_styled*. Your newly created theme is based on these by default, but they
contain very limited styling. You can take advantage of an *existing* theme's
styling by setting the theme of your choice as the base for your theme.

Base themes are added in layers. First *_unstyled* is added, giving you the core
of the theme, then *_styled*, providing the most basic elements. When you set a
different base theme, it's added on top of *_styled* and overrides the default
styling wherever there are differences. After the base themes are added, your
own custom styling is added on top.

To specify a base theme, edit the `build.xml` file for your theme and change
*_styled* in `<property name="theme.parent" value="_styled>` to the name of any
existing theme that's installed or in your Plugins SDK. 

### Deploying the Theme

If you're already familiar with portlet deployment from reading Chapter 3, theme
deployment will be a piece of cake! You can deploy your theme in Developer
Studio or the terminal. 

***Deploying in Developer Studio:*** Click and drag your theme project onto your
server. 

![Figure 4.2: Drag and drop your theme onto the server](../../images/05-themes-6.png)

Upon deploying, your server outputs messages indicating your plugin is read,
registered, and available for use. 

	Reading plugin package for deep-blue-theme
	Registering themes for deep-blue-theme
	1 theme for deep-blue-theme is available for use

***Deploying in the terminal:*** Open a terminal window in your
`themes/deep-blue-theme` directory and enter

    ant deploy

A BUILD SUCCESSFUL message indicates your theme is now being deployed. If you
switch to the terminal window running Liferay, within a few seconds you will
see the message `1 theme for deep-blue-theme is available for use`.

Let's apply your theme to a page:

1. Go to your web browser and log in to the portal. 

2. Hover over **Manage** at the top of the page and click on *Page*. 

3. Directly underneath the words **Manage Pages**, select the *Look and Feel*
tab. Click on your theme to activate it. 

## Anatomy of a Theme

Custom themes are created by layering your customizations on top of one of
Liferay's built-in themes. 

The structure of a theme separates different types of resources into easily
accessible folders. Here's the full structure of our Deep Blue theme:

-	`deep-blue-theme/`

	-	`docroot/`
	
		-	`WEB-INF/`
		
			-	`liferay-plugin-package.properties`
			
		-	`_diffs/` - subfolders not created by default.
		
			-	`css/`
			
			-	`images/`
			
			-	`js/`
			
			-	`templates/`
		
		-	`css/`
			-	`application.css`
			
			-	`base.css`
			
			-	`custom.css`
			
			-	`dockbar.css`
			
			-	`extras.css`
			
			-	`forms.css`
			
			-	`layout.css`
			
			-	`main.css`
			
			-	`navigation.css`
			
			-	`portlet.css`
		
		-	`images/`
		
			-	(many directories)
		
		-	`js/`
			
			-	`main.js`
		
		-	`templates/`
			
			-	`init_custom.vm`
			
			-	`navigation.vm`
			
			-	`portal_normal.vm`
			
			-	`portal_pop_up.vm`
			
			-	`portlet.vm`

The `_diffs` folder that's created inside the `docroot` directory of your theme
is important; this is where you place your theme's code. The `_diffs` folder
must mirror the parent theme's directory structure. Since you'll only customize
the parts of your theme that differ from the parent theme, place only the
folders and files you'll customize there. 

The other folders inside `docroot` were copied over from the parent theme in
your Liferay bundle when you deployed your theme. Use these files as the basis
for your modifications. For example, to customize the navigation, copy
`navigation.vm` from `deep-blue-theme/docroot/templates/navigation.vm` into the 
`deep-blue-theme/docroot/_diffs/templates` folder (you may have to create this
folder first). You can then open this file and customize it to your liking. 

For custom styles, create a folder named `css` inside your `_diffs` folder and
place a single file there called `custom.css`. This is where you'll define all
your new styles. Because `custom.css` is loaded last, styles defined here
override any styles in the parent theme.

It's a best practice to add your styles only to the `custom.css` file. This
keeps all of your changes in one place and makes future upgrades easier, because
you won't have to manually modify your templates to add support for new Liferay
features. 

Whenever you modify your theme in Developer Studio, redeploy it by
right-clicking your theme (located underneath your server), then selecting
*Redeploy* from the menu. 

![Figure 4.3: How to redeploy your theme plugin](../../images/05-themes-2.png)

Alternatively, redeploy your theme by opening a terminal, navigating to
`themes/deep-blue-theme` and entering the command

	ant deploy 

Wait a few seconds until the theme deploys, then refresh your browser to see
your changes. 

Would you rather see your changes immediately, rather than having to redeploy to
make your changes visible? Let's talk about Liferay Developer Mode to learn how. 

<!-- Developer Mode section needs editing. I don't understand this concept very
well. Hopefully this start is useful. -Russ --> 

## Developer Mode

Do you want to develop Liferay resources without having to redeploy to see your
portal modifications? Use Liferay Developer Mode! In Developer mode all caches
are removed, so any changes you make are visible right away. You won't have to
reboot the server as often if you use Developer Mode.
<!-- Not certain I got that right. -Russ -->

Before you use Developer Mode, you'll have to add the
`portal-developer.properties` file to your application server's configuration
file. Each application server has a different configuration file or UI to
specify system properties. Let's demonstrate using Tomcat application server.

In your `setenv.sh` file (`setenv.bat` in Windows), find the line setting the
`JAVA_OPTS` variable and add the following to the list of options:
    
    `Dexternal-properties=portal-developer.properties` 

The following is an example of the `JAVA_OPTS` variable lines with your code
included:

        JAVA_OPTS="-Xms256m -Xmx1024m -XX:PermSize=32m -XX:MaxPermSize=160m
        -Dfile.encoding=UTF8 -Duser.timezone=GMT+2
        -Djava.security.auth.login.config=$CATALINA_HOME/conf/jaas.config
        -Dorg.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES=false
        -Dexternal-properties=portal-developer.properties"
    
 [tip](../../images/tip-pen-paper.png)**Tip:** If you're already using the
 system property `external-properties` to load other properties files, add
 `portal-developer.properties` to the list and use a comma to separate it from
 other entries.

How does Developer Mode let you see your changes more quickly? In Developer
Mode, there are several changes to the normal order of operations:

    - CSS files are loaded individually rather than being combined and loaded as
    a single CSS file.

    - JavaScript files are also loaded individually, including JavaScript for
    the portal itself and JavaScript related to any portlet registered through
    `liferay-portlet.xml`. JavaScript logs are also enabled in Developer Mode. 

    - Modification-based caching of web resources is disabled. 

    - Velocity Templates for themes and journal articles are not cached, so
    changes will be applied immediately. 

Individual file loading of your styling and behaviors, combined with disabled
caching for web resources and Velocity Templates, let's you see your changes
more quickly when operating in Developer Mode. 

Now, when you modify your theme's `custom.css` file directly in your Liferay
Bundle, you can see your changes applied as you make them! Make sure you copy
any changes you make back into your `_diffs` folder, or they'll be overwritten
when you redeploy your theme. 

Let's add a thumbnail image for our theme now. 

## Thumbnails

In the *Look and Feel* settings, the *Classic* theme has a thumbnail preview
image, but our theme has only a broken image. To remedy this, create a PNG file
named `screenshot.png` and place it in your theme's `docroot/_diffs/images`
directory. The image must be precisely 1080 pixels wide by 864 pixels high. On
redeployment, the thumbnail will be automatically generated from
`screenshot.png`.

Now go to the *Look and Feel* settings. Your theme's thumbnail should appear
there, along with the *Classic* theme's thumbnail. 

 ![tip](../../images/tip-pen-paper.png)**Tip:** To achieve the 1080x864
 resolution in a new browser window, use the button provided in the Resize
 Browser web content article displayed on the Welcome page. 
 
<!-- This tip comes verbatim from the ADDING A SCREENSHOT/THUMBNAIL slide in the
Themes course's 02-building-a-theme.fodp slideshow -->
 
Let's talk about Liferay's JavaScript library next. 

## JavaScript

Liferay has its own JavaScript library called AlloyUI, an extension to Yahoo's
YUI3 framework. You can take advantage of AlloyUI or YUI3 in your themes. Inside
your theme's `main.js` file, you'll find definitions for three JavaScript
callbacks:

- **AUI().ready(fn):** Executed after the HTML in the page has finished loading
(minus any portlets loaded via AJAX). 

- **Liferay.Portlet.ready(fn):** Executed after each portlet on the page has
loaded. The callback receives two parameters: `portletId` and `node`.
`portletId` is the ID of the portlet that was just loaded. `node` is the Alloy
Node object of the same portlet. 

- **Liferay.on('allPortletsReady', fn):** Executed after everything else
(including AJAX portlets) has finished loading. 

![Figure 4.4: Content of main.js](../../images/05-themes-4.png)

Now let's make your theme configurable by defining settings. 

## Settings

You can define settings to make your theme configurable. Create a file named
`liferay-look-and-feel.xml` in the `WEB-INF` directory, with the following
content:

    <?xml version="1.0"?>
    <!DOCTYPE look-and-feel PUBLIC "-//Liferay//DTD Look and Feel 6.1.0//EN"
    "http://www.liferay.com/dtd/liferay-look-and-feel_6_1_0.dtd">

    <look-and-feel>
		<compatibility>
			<version>6.1.10+</version>
		</compatibility>
		<theme id="deep-blue" name="Deep Blue">
			<settings>
				<setting key="my-setting" value="my-value" />
			</settings>
		</theme>
    </look-and-feel>

To define additional settings, add more `<settings>` elements to the file.
Access the settings from the theme templates using the following code:

    $theme.getSetting("my-setting")

Let's say you want to be able to choose from two different page headers (perhaps
one includes more details, while the other is smaller). Instead of creating two
themes that are identical except for some changes in the header, you can create
one and define a setting that lets you choose which header is displayed. 

In the `portal_normal.vm` template, write:

    #if ($theme.getSetting("header-type") == "detailed")
		#parse ("$full_templates_path/header_detailed.vm")
    #else
		#parse ("$full_templates_path/header_brief.vm")
    #end

Then, add two different entries in the `liferay-look-and-feel.xml` file
that refer to the same theme, but have different values for the header-type
setting:

    <theme id="deep-blue" name="Deep Blue">
		<settings>
			<setting key="header-type" value="detailed" />
		</settings>
		</theme>
			<theme id="deep-blue-mini" name="Deep Blue Mini">
		<settings>
			<setting key="header-type" value="brief" />
		</settings>
    </theme>

Alternatively, you can make your settings configurable from within Liferay
portal. Use *configurable* settings to let users turn certain theme features on
or off or to allow users to provide input to a theme setting. 

As an example, you can create an option to display a slogan next to your
company's name in the footer of your site's pages:

1. Insert logic into your `portal_normal.vm` template to display a slogan along
with your company's name (e.g. Nosester) in the footer of your site pages:

        <footer id="footer" role="contentinfo">
            <p>
                #if($theme.getSetting("display-slogan-footer") == true)
                    Nosester $theme.getSetting("slogan")
                #else
                    Nosester
                #end
            </p>
        </footer>

 ![note](../../images/tip-pen-paper.png)**Note:** Let's look more closely at two
 theme setting variables appearing in the above logic:

 - **display-slogan-footer:** Holds a boolean value indicating whether to
 display the version of the footer that contains your slogan.

 - **slogan:** holds your slogan text.

2. Declare the two theme setting variables in your `liferay-look-and-feel.xml`,
located in your theme's `WEB-INF` folder:

    <settings>
    	<setting configurable="true" 
                 key="slogan" 
                 type="textarea" 
                 value="" 
        />

       	<setting configurable="true" 
                 key="display-slogan-footer" 
                 type="checkbox" 
                 value="true"
        />
    </settings>

The portal administrator can enter a slogan and activate it for the portal via
the *Look and Feel* section of the *Manage Site Pages* panel (see the *Creating
sites and managing pages* section of [Using Liferay
Portal](http://www.liferay.com/documentation/liferay-portal/6.1/user-guide/-/ai/managing-pages-in-liferay-port-1)). 

![Figure 4.5: Setting the footer display slogan in the *Look and Feel* of the site's page settings.](../../images/themes-custom-configurable-setting.png)

When the portal administrator saves the settings, your site's pages show the new
footer, including the slogan. 

![Figure 4.6: The slogan displayed in the page footer.](../../images/themes-custom-configurable-setting-displayed.png)


 ![note](../../images/tip-pen-paper.png)**Note:** Use a language properties hook
 to display configurable theme settings properly, like the slogan text area and
 footer checkbox from the previous example. For details, see the [Overriding a
 *Language.properties*
 File](https://www.liferay.com/documentation/liferay-portal/6.1/development/-/ai/overriding-a-%3Cem%3Elanguage-properties-lt-em-gt-fi-1)
 section found in the *Hooks* chapter of this guide.

Next let's customize your theme's color scheme. 

## Color Schemes

Specify color schemes with a CSS class name, which of course also lets you
choose different background images, different border colors, and more. 

Here's how you can define your color schemes in `liferay-look-and-feel.xml`:

    <theme id="deep-blue" name="Deep Blue">
		<settings>
			<setting key="my-setting" value="my-value" />
		</settings>
		<color-scheme id="01" name="Day">
			<css-class>day</css-class>
			<color-scheme-images-path>${images-path}/color_schemes/${css-class}</color-scheme-images-path>
		</color-scheme>
		<color-scheme id="02" name="Night">
			<css-class>night</css-class>
		</color-scheme>
    </theme>

In your `_diffs/css` folder, create a `color_schemes` folder and place a `.css`
file in it for each color scheme. In the case above, we can have either one file
called `night.css`, letting the default styling handle the first color scheme,
or we can use both `day.css` and `night.css` to specify each scheme. Let's use
the latter option here, creating both files to define our color schemes.

Place the following lines at the bottom of your `custom.css` file:

    @import url(color_schemes/day.css);
    @import url(color_schemes/night.css);

The color scheme CSS class is placed on the `<body>` element, so you can use it
to identify your styling. In `day.css`, prefix all your CSS styles like this:

    body.day { background-color: #ddf; }
    .day a { color: #66a; }

In `night.css`, prefix all your CSS styles like this:

    body.night { background-color: #447; color: #777; }
    .night a { color: #bbd; }

You can create separate thumbnail images for your color schemes. The
`<color-scheme-images-path>` element tells Liferay where to look for these
images (you only have to place this element in one color scheme for it to affect
both). For our example, create the folders `_diffs/images/color_schemes/day` and
`_diffs/images/color_schemes/night`. In each folder place a `thumbnail.png` and
`screenshot.png` file, according to the specifications defined in the Thumbanils
section above. 

Let's review the predefined settings available for your theme. 

## Portal Predefined Settings

The portal defines some settings that allow the theme to determine certain
behaviors. As of this writing, predefined settings are only available for
portlet borders and bullet styles, but more settings may be added in the future.
Modify these settings from the `liferay-look-and-feel.xml` file. 

By default, portlet borders are turned on. If set to `false`, the portal's
default behavior is to turn off portlet borders. 

Here's how the XML looks when you modify the default to `false`:

    <settings>
		<setting key="portlet-setup-show-borders-default" value="false" />
    </settings>

Override default behavior for individual portlets using:

* `liferay-portlet.xml`

<!-- Really had a hard time figuring out where we transition from portlet borders to bullet styles.  Still don't know. -Russ-->

* Portlet CSS popup setting: Used by the *Navigation* portlet to determine the
CSS class name of the list of pages. The value must be a comma separated list of
valid bullet styles. 

<!-- Is the above paragraph describing PortletCSS popup settings? -Russ--> 
<!-- Beats me. --> 

Example:

    <settings>
		<setting key="bullet-style-options" value="classic,modern,tablemenu" />
    </settings>

<!-- Is this where we begin talking about bullet styles? I was ocnfused in this section -Russ-->

The user can change the bullet style in the *Navigation* portlet's configuration
menu. The chosen style is applied as a CSS class on the `<div>` containing the
navigation. This class is named in the following pattern:

    .nav-menu-style-{BULLET_STYLE_OPTION} {
		... CSS selectors ...
    }

Here's an example of the HTML code needed to add style through CSS code. In this
case the bullet style option is **modern**:

    <div class="nav-menu nav-menu-style-modern">
		<ul class="breadcrumbs lfr-component">
			...
		</ul>
    </div>

Using CSS, and maybe some unobtrusive JavaScript, you can create any type of
menu. 

Next we'll see how Liferay lets your theme inherit styling from a parent theme. 

## Theme inheritance

By default, themes are based on the *_styled* theme, which provides only basic
styling of portlets. If you open the `build.xml` file in your theme's directory
using the Build Application Configuration Editor, you see the following code:

![Figure 4.7: Content of build.xml](../../images/05-themes-5.png)

The `theme.parent` property determines the theme your theme inherits its styling
from. In addition to the *_styled* theme, you can choose to inherit from the
*_unstyled* theme, which contains no styling. This makes more work for you, but
offers full flexibility to design your CSS files from scratch. 

You can also use the default Liferay theme **Classic** as a parent theme. You'll
start with a look and feel that's already smooth and works well. But since so
much is already done for you, there's less flexibility when building your
design. It's a compromise between creating a theme as quickly as possible versus
having full control of the result. It's your choice, and another example of the
flexibility Liferay offers.

## Summary

In this chapter you learned how to customize the look and feel of your Liferay
Portal to the extent that you desire with custom themes. In the process you
created your own theme, learned about its directory structure, and discovered
the value of stlye inheritance from a parent theme. You also learned about
Liferay's JavaScript library, AlloyUI, and how to and how to make your theme
configurable by adding settings that portal administrators can manage within
Liferay. Your CSS options, including color schemes, and predefined settings for
your theme, were discussed to round out your understanding of theme development. 
<!-- Took a crack at writing a summary. -Russ -->
