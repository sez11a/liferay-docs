# Creating Liferay Themes

Do you want to completely transform the look and feel of your Liferay Portal?
Create your own Liferay Theme! Themes are hot deployable plugins unique to a
site served by the portal. With themes, you can alter the user interface so
completely that it's difficult or impossible to tell that the site is running on
Liferay. 

Liferay provides a well organized, modular structure to its themes, allowing
you, the theme developer, to quickly modify everything from the border around a
portlet window to every object on the page. But you don't have to customize
every aspect of the theme. Your theme can inherit the styling, images, and
templates from any of the built in themes, overriding them only where necessary.
Inheritance keeps your themes smaller and less cluttered, leaving out data that
already exists in the default theme (e.g., emoticons graphics for the message
boards portlet). 

## Introduction

In this chapter we'll learn about:

- **Creating a Theme** 

- **Anatomy of a Theme**

- **Thumbnails**

- **Javascript**

- **Settings**

- **Color Schemes**

- **Portal Predefined Settings** 

- **Theme Inheritance**

Liferay's themes are designed to be very easy to create. Start by making changes
in CSS files and as your customization requirements grow, change the HTML that
controls the page design. 

Some of the technologies you may need to know to make the best use of themes
include:

- **CSS:** You can create a whole new theme just by modifying a CSS file. 

- **Velocity:** You can create templates using this simple, yet powerful, tool.
Us it to customize the HTML generated by the theme. 

- **JavaScript:** You can add special behaviors using JavaScript. 

- **XML:** You can modify the XML of a theme's configuration file to specify
some settings of the theme. 

To follow the examples in this guide you also need some familiarity using either
the command line or the Liferay IDE, where you can use its menus instead of the
commands used in the text. 

## Creating a Theme 

The process for creating a new theme is nearly identical to the one for making a
portlet. Since our theme will be named *Deep Blue*, our project name (without
spaces) is *deep-blue*. Our display name (which can have spaces) is just *Deep
Blue*. Let's create the theme using two methods, Liferay Developer Studio and
the terminal. 

***Using Developer Studio:*** 

1. Go to File &rarr; New &rarr; Liferay Project. 

2. Next, go through the following steps to setup your new theme:

    2.1. Fill in *deep-blue* for the Project name and *Deep Blue* for the
    Display name. 

    2.2. Select the Liferay Plugins SDK and Portal Runtime you've configured. 

    2.3. Select *Theme* for your Plugin type. 

    2.4. Click *Finish*. 

![Figure 4.1: Creating your theme plugin](../../images/05-themes-1.png)

When creating a new plugin in Developer Studio, we can either create a
completely new plugin or add a new plugin to an existing plugin project. 

***Using the terminal:*** Navigate to the `themes` directory in the Plugins SDK
and enter the appropriate command for your operating system:

1. In Linux and Mac OS X, enter

    ./create.sh deep-blue "Deep Blue"

2. In Windows, enter

    create.bat deep-blue "Deep Blue"

Now you have a blank theme in your `themes` folder, which the Plugins SDK
automatically named according to your specified project name, with "-theme"
appended to it. At first, your theme will be empty. But later, when you run `ant
deploy`, all the files and folders of the theme will be populated. 

### Setting a base Theme

All themes in Liferay are built on top of the *_unstyled* and *_styled* themes,
which contain very limited styling. By default, your newly created themes are
built with only these as a base. However, you can set an *existing* theme as
your base theme, to gain the additional styling from that theme, as well as the
elements for *_styled* and *_unstyled*. 

When a theme is built, the base themes are added in layers - first *_unstyled*
is added, giving you the core of the theme, then *_styled*, providing the most
basic elements. If you use a different base theme, it's added on top of
*_styled*, overriding the default styling wherever applicable. After the base
themes are added, your own custom styling is added on top. 

If you want to use a different base theme than the default, you can edit the
`build.xml` file, changing *_styled* in `<property name="theme.parent"
value="_styled>` to the name of an available theme that you wish to use. 

### Deploying the Theme

If you're already familiar with portlet deployment from reading Chapter 3,
you'll find theme deployment to be a piece of cake. Like portlets, themes are
deployed in Developer Studio or the terminal. 

***Deploying in Developer Studio:*** Click and drag your theme project onto your
server. 

![Figure 4.2: Drag and drop your theme onto the server](../../images/05-themes-6.png)

Upon deploying, your server will output messages indicating your plugin is read,
registered, and available for use. 

	Reading plugin package for deep-blue-theme
	Registering themes for deep-blue-theme
	1 theme for deep-blue-theme is available for use

***Deploying in the terminal:*** Open a terminal window in your
`themes/deep-blue-theme` directory and enter this command:

    ant deploy

A BUILD SUCCESSFUL message indicates that your theme is now being deployed. If
you switch to the terminal window running Liferay, and wait for a few seconds,
you should see the message *1 theme for deep-blue-theme is available for use*. 

To apply your theme to a page, go to your web browser and login to the portal.
Hover over **Manage** at the top of the page, and click on *Page*. Directly
underneath the words **Manage Pages** select the *Look and Feel* tab. Simply
click on your theme to activate it. 

## Anatomy of a Theme

Custom themes are based on differences from one of several built-in Liferay
themes. 

The structure of a theme is designed to separate different types of resources
into easily accessible folders. Here's the full structure of our Deep Blue
theme:

-	`deep-blue-theme/`

	-	`docroot/`
	
		-	`WEB-INF/`
		
			-	`liferay-plugin-package.properties`
			
		-	`_diffs/` - subfolders not created by default.
		
			-	`css/`
			
			-	`images/`
			
			-	`js/`
			
			-	`templates/`
		
		-	`css/`
			-	`application.css`
			
			-	`base.css`
			
			-	`custom.css`
			
			-	`dockbar.css`
			
			-	`extras.css`
			
			-	`forms.css`
			
			-	`layout.css`
			
			-	`main.css`
			
			-	`navigation.css`
			
			-	`portlet.css`
		
		-	`images/`
		
			-	(many directories)
		
		-	`js/`
			
			-	`main.js`
		
		-	`templates/`
			
			-	`init_custom.vm`
			
			-	`navigation.vm`
			
			-	`portal_normal.vm`
			
			-	`portal_pop_up.vm`
			
			-	`portlet.vm`

Let's talk about the `_diffs` folder that's created inside the `docroot`
directory of your theme; this is where you place your theme's code. Remember,
only customize the parts of your theme that will differ from the parent theme.
To do this, you mirror the directory structure of the parent theme inside of the
`_diffs` folder, placing only the folders and files you need to customize there. 

There are several other folders inside `docroot`; these were copied over from
the parent theme in your Liferay bundle when you deployed your theme. You should
use these files as the basis for your modifications. For example, to customize
the navigation, copy `navigation.vm` from
`deep-blue-theme/docroot/templates/navigation.vm` into
`deep-blue-theme/docroot/_diffs/templates` folder (you may have to create this
folder first). You can then open this file and customize it to your liking. 

For custom styles, create a folder named `css` inside your `_diffs` folder and
place a single file there called `custom.css`. This is where to put all of your
new styles and overrides of the parent theme's styles. Because `custom.css` is
loaded last, styles in this file override any styles in the parent theme. 

It's best practice to make all your custom theme styles using only the
`custom.css` file, not overriding any of the templates unless absolutely
necessary. This makes future upgrades much easier, because you won't have to
manually modify your templates to add support for new Liferay features. 

Whenever you make modifications to your theme in Developer Studio, redeploy it
by right clicking your theme located underneath your server, and selecting
*Redeploy* from the menu. 

![Figure 4.3: How to redeploy your theme plugin](../../images/05-themes-2.png)

Alternatively, redeploy your theme by opening a terminal in
`themes/deep-blue-theme` and enter this command:

	ant deploy 

Wait a few seconds until the theme deploys, then refresh your browser to see
your changes. 

---

 ![tip](../../images/tip-pen-paper.png)**Tip:** To see changes more quickly,
 modify your theme directly in your Liferay bundle. In our example, `custom.css`
 is located in
 `liferay-portal-[version]/tomcat-[tomcat-version]/webapps/deep-blue-theme/css`.
 However, for modifications made here to appear in your browser as soon as you
 refresh the page, you must enable Liferay Developer Mode. See the Liferay wiki
 for more information. 

---

Make sure you copy any changes you make back into your *_diffs* folder, or
they'll be overwritten when you redeploy your theme. 

## Thumbnails

In the *Look and Feel* settings, the *Classic* theme has a
thumbnail preview of what it looks like, but our theme has only a broken
image. Let's fix this:

1. Take a screenshot of your theme and save it in `_diffs/images` with the name
`thumbnail.png`. It must be precisely 150 pixels wide by 120 pixels
high. 

2. Save another version, this time precisely 1080 pixels wide by 864 pixels
high. Save in the `_diffs/images` directory with the name `screenshot.png`. 

After redeploying your theme, it's thumbnail preview will be shown in the *Look
and Feel* settings just like the *Classic* theme. 

## JavaScript

Liferay has its own JavaScript library called Alloy, an extension to Yahoo's
YUI3 framework. You can take advantage of the full power of either of these
frameworks in your themes. Inside your theme's `main.js` file, you will find
definitions for three JavaScript callbacks:

- **AUI().ready(fn):** This callback is executed as soon as the HTML in the page
has finished loading (minus any portlets loaded via AJAX). 

- **Liferay.Portlet.ready(fn):** Executed after each portlet on the page has
loaded. The callback receives two parameters: `portletId` and `node`.
`portletId` is the ID of the portlet that was just loaded. `node` is the Alloy
Node object of the same portlet. 

- **Liferay.on('allPortletsReady', fn):** Executed after everything else --
including AJAX portlets -- has finished loading. 

![Figure 4.4: Content of main.js](../../images/05-themes-4.png)

## Settings

Each theme can define settings to make it configurable. A file named
`liferay-look-and-feel.xml` defines these files, and is located inside the
`WEB-INF` directory. This file doesn't exist by default; you should create it
now with the following content:

    <?xml version="1.0"?>
    <!DOCTYPE look-and-feel PUBLIC "-//Liferay//DTD Look and Feel 6.1.0//EN"
    "http://www.liferay.com/dtd/liferay-look-and-feel_6_1_0.dtd">

    <look-and-feel>
		<compatibility>
			<version>6.1.10+</version>
		</compatibility>
		<theme id="deep-blue" name="Deep Blue">
			<settings>
				<setting key="my-setting" value="my-value" />
			</settings>
		</theme>
    </look-and-feel>

You can define additional settings by adding more `<setting>` elements. These
settings can be accessed in the theme templates using the following code:

    $theme.getSetting("my-setting")

For an example, let's say we need to create two themes that are exactly the same
except for some changes in the header. One of the themes has more details while
the other is smaller (and takes less screen real estate). Instead of creating
two different themes, let's create one and use a setting to choose which header
we want displayed. 

In the `portal_normal.vm` template we could write:

    #if ($theme.getSetting("header-type") == "detailed")
		#parse ("$full_templates_path/header_detailed.vm")
    #else
		#parse ("$full_templates_path/header_brief.vm")
    #end

Then when we write the `liferay-look-and-feel.xml`, we write two different
entries that refer to the same theme but have a different value for the
header-type setting:

    <theme id="deep-blue" name="Deep Blue">
		<settings>
			<setting key="header-type" value="detailed" />
		</settings>
		</theme>
			<theme id="deep-blue-mini" name="Deep Blue Mini">
		<settings>
			<setting key="header-type" value="brief" />
		</settings>
    </theme>

You can also make your settings configurable from within Liferay portal. If you
want to provide options to turn certain theme features on or off, or allow a
user to provide input to a theme setting, you can use *configurable* settings. 

As an example, here's how you'd create an option to display a slogan next to
your company's name in the footer of your site's pages:

1. Insert logic into your `portal_normal.vm` template to display a slogan along
with your company's name (e.g. Nosester) in the footer of your site pages:

        <footer id="footer" role="contentinfo">
            <p>
                #if($theme.getSetting("display-slogan-footer") == true)
                    Nosester $theme.getSetting("slogan")
                #else
                    Nosester
                #end
            </p>
        </footer>

A note about a few of the theme setting variables appearing in the above logic:

- **display-slogan-footer:** holds a boolean value indicating whether to display
the version of the footer that contains your slogan. 

- **slogan:** holds your slogan text. 

2. Next, declare the two theme setting variables in your
`liferay-look-and-feel.xml`, found in your theme's `WEB-INF` folder:

        <settings>
        		<setting configurable="true" key="slogan" type="textarea" value=""></setting>
        		<setting configurable="true" key="display-slogan-footer" type="checkbox" value="true"></setting>
        </settings>

The portal administrator can input a slogan and activate it for the portal via
the *Look and Feel* section of the *Manage Site Pages* panel (see the *Creating
sites and managing pages* section of [Using Liferay
Portal](http://www.liferay.com/documentation/liferay-portal/6.1/user-guide/-/ai/managing-pages-in-liferay-port-1)). 

![Figure 4.5: Setting the footer display slogan in the *Look and Feel* of  the site's page settings.](../../images/themes-custom-configurable-setting.png)

Then, when the portal administrator saves these settings, the site's pages
display the new footer containing the slogan. 

![Figure 4.6: The slogan displayed in the page footer.](../../images/themes-custom-configurable-setting-displayed.png)


 ![note](../../images/tip-pen-paper.png)**Note:** A language properties hook
 should be used to properly display configurable theme settings, such as the
 slogan text area and footer checkbox from the previous example. For details, 
 see the [Overriding a *Language.properties* File](https://www.liferay.com/documentation/liferay-portal/6.1/development/-/ai/overriding-a-%3Cem%3Elanguage-properties-lt-em-gt-fi-1)
 section found in the *Hooks* chapter of this guide. 

Next, let's manage the color schemes in your theme. 

## Color Schemes

Color schemes are specified using a CSS class name, which also lets you choose
different background images, different border colors, and more. 

Here's how you can define your color schemes in `liferay-look-and-feel.xml`:

    <theme id="deep-blue" name="Deep Blue">
		<settings>
			<setting key="my-setting" value="my-value" />
		</settings>
		<color-scheme id="01" name="Day">
			<css-class>day</css-class>
			<color-scheme-images-path>${images-path}/color_schemes/${css-class}</color-scheme-images-path>
		</color-scheme>
		<color-scheme id="02" name="Night">
			<css-class>night</css-class>
		</color-scheme>
    </theme>

In your `_diffs/css` folder, create a folder called `color_schemes`, and place a
`.css` file in it for each of your color schemes. In the case above, we can
either have one file, called `night.css` and let the default styling handle the
first color scheme, or you can have both `day.css` and `night.css` to specify
the schemes. 

Let's follow the second route (creating both scheme's folders in our
`color_schemes` folder). Place the following lines at the bottom of your
`custom.css` file:

    @import url(color_schemes/day.css);
    @import url(color_schemes/night.css);

The color scheme CSS class is placed on the `<body>` element, so you can use it
to identify you styling. In `day.css` you would prefix all of your CSS styles
like this:

    body.day { background-color: #ddf; }
    .day a { color: #66a; }

And in `night.css` you would prefix all of your CSS styles like this:

    body.night { background-color: #447; color: #777; }
    .night a { color: #bbd; }

You can also create separate thumbnail images for each of your color schemes.
The `<color-scheme-images-path>` element tells Liferay where to look for these
images (you only have to place this element in one of the color schemes for it
to affect both). For our example, create the folders
`_diffs/images/color_schemes/day` and `_diffs/images/color_schemes/night`. In
each of these folders place a `thumbnail.png` and `screenshot.png` file,
following the size specifications defined in the Thumbanils seciton above. 

## Portal Predefined Settings

The portal defines some settings that allow the theme to determine certain
behaviors. As of this writing, there are only two predefined settings, for
portlet borders and bullet styles, but this number may grow in the future. You
can modify these settings from the `liferay-look-and-feel.xml` file. 

By default, the portlet shows portlet borders. If set to `false`, the portal's
default behavior is to turn off portlet borders. 

Here's how the XML looksd when you modify the default to `false`:

    <settings>
		<setting key="portlet-setup-show-borders-default" value="false" />
    </settings>

This default behavior can be overridden for individual portlets using:

* `liferay-portlet.xml`

* Portlet CSS popup setting

This setting is used by the *Navigation* portlet to determine the CSS class name
of the list of pages. The value must be a comma separated list of valid bullet
styles to be used. 

Example:

    <settings>
		<setting key="bullet-style-options" value="classic,modern,tablemenu" />
    </settings>

The bullet style can be changed by the user in the *Navigation* portlet
configuration. The chosen style will be applied as a CSS class on the `<div>`
containing the navigation. This class will be named in the following pattern:

    .nav-menu-style-{BULLET_STYLE_OPTION} {
		... CSS selectors ...
    }

Here is an example of the HTML code that you would need to add style through CSS
code. In this case the bullet style option is **modern**:

    <div class="nav-menu nav-menu-style-modern">
		<ul class="breadcrumbs lfr-component">
			...
		</ul>
    </div>

Using CSS, and maybe some unobtrusive Javascript, it's possible to implement any
type of menu. 

## Theme inheritance

By default, themes are based on the *_styled* theme, which provides only basic
styling of portlets. If you open the `build.xml` file in your theme's directory
using the Build Application Configuration Editor, you see the following:

![Figure 4.7: Content of build.xml](../../images/05-themes-5.png)

The `theme.parent` property determines which built-in theme your theme will
inherit from. In addition to the *_styled* theme, you may also choose to inherit
from the *_unstyled* theme, which contains no styling whatsoever. This makes
more work for you, but you get full flexibility to design your own CSS files
from scratch. 

You can also use the default Liferay theme, called **classic**, as the parent of
your themes. Thyis way you'll to start with a look and feel that already works
and gets nice results. But since so much is already done for you, there's not as
much flexibility to build your desired design. It's a compromise between
creating a theme as quickly as possible versus having full control of the
result. It's your choice, and another example of the flexibility you get when
using Liferay. 
