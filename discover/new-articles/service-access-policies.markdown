# Service Access Policies

*Service access policies* are a new feature in Liferay 7. They constitute an
additional layer of web service security. Service access policies define
services or service methods that can be invoked remotely. Multiple service
access policies can be applied at once to produce a combined effect. Service
access policies apply only to remote services, not to local services. To help
you understand how service access policies fit into the big picture, here's a
summary of Liferay's web service security layers:

- IP permission layer: The IP address from which a web service invocation
  request originates must be white-listed in the Liferay server's portal
  properties file. Any attempted web service invocation coming from a
  non-whitelisted IP address automatically fails.
- Service access policy layer: The method corresponding to a web service
  invocation request must be whitelisted by each service access policy that's in
  effect. Wildcards can be used to reduce the number of service classes and
  methods that must be explicitly whitelisted.
- Authentication/verification layer (browser-only): If a web service invocation
  request comes from a browser, the request must include an authentication
  token. This authentication token is the value of the `p_auth` URL parameter.
  The value of the authentication token is generated by Liferay and is
  associated with your browser session. The `p_auth` parameter is automatically
  supplied when you invoke a Liferay web service via the JSON web services API
  page or via JavaScript using `Liferay.Service(...)`. If Liferay cannot
  associate the caller's authentication token with a portal user, the web
  service invocation request fails.
- User permission layer: Web services should include permission checks. The user
  invoking a web service must have the appropriate Liferay permissions in order
  to pass whatever permission checks are included in the remote service method
  being invoked.

Note that service access policies respect Liferay's permissions system. Even if
a service access policy grants a user access to a remote service, the user must
still have the appropriate permissions to invoke that service.

Service access policies are especially useful when remote applications such as
mobile devices or Liferay Sync instances need to access Liferay's web services.
Your portal administrators can use service access policies to ensure that these
devices can only invoke remote services from approved lists that can be modified
at runtime.

## Managing Service Access Policies

To manage service access policies, navigate to Liferay's Control Panel and click
on *Service Access Policy* under the Configuration heading. Here, you can see
the default service access policies and you can add new ones. When creating or
editing service access policies, keep the following points in mind:

- Service access policy names must be unique per portal instance.
- Service access policy names can include only these allowed characters:

        0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#:@-./_

- Service access policy titles can be localized; service access policy names
  cannot be localized.
- Allowed service signatures must be entered one per line. Wildcards (`*`) are
  allowed for both class names and method names. The `#` symbol must be used to
  separate a class name from a method name. E.g.,

        com.liferay.portal.service.UserService

    allows any method from the `UserService` class to be invoked.

        com.liferay.portlet.documentlibrary.DLAppService#get*

    allows any method from the `DLAppService` whose name starts with `get` to be
    invoked. Thus,

        com.liferay.portal.service.UserService
        com.liferay.portlet.documentlibrary.DLAppService#get*

    allows any method from the `UserService` class to be invoked and any method
    from the `DLAppService` whose name starts with `get` to be invoked.

Liferay contains two default service access policies: `DEFAULT_USER`, and
`DEFAULT_APP`. The `DEFAULT_USER` policy grants access to any service, by
default. You can change this by editing the `DEFAULT_USER` policy and changing
the `*` in the Allowed Service Signatures text area to something more
restrictive. The `DEFAULT_USER` policy is applied whenever
`AuthVerifierResult.isPasswordBasedAuthentication` is `true`, i.e., whenever
authentication took place using a password.

The `DEFAULT_APP` policy doesn't grant access to any services, by default. You
can change this by editing the `DEFAULT_APP` policy and adding some classes or
methods in the Allowed Service Signatures text area. The `DEFAULT_APP` policy is
applied whenever `AuthVerifierResult.isPasswordBasedAuthentication` is `false`,
i.e., whenever authentication took place without using a password. E.g., if
authentication took place via a token instead of via a password, the
`DEFAULT_APP` policy is applied.

By default, Liferay's tunneling servlet uses the `DEFAULT_USER` service access
policy. However, you can create your own policy for the tunneling servlet and
use the property `service.access.policy.name` for the
`TunnelingServletAuthVerifier` to specify that your policy should be used
instead.

## Service Access Policy Module

Liferay's service access policy functionality is provided by the Service Access
Policy module. This module includes the following important classes:

- `com.liferay.portal.kernel.security.service.access.policy.ServiceAccessPolicy`:
  defines the public interface for `ServiceAccessPolicy`.
- `com.liferay.portal.kernel.security.service.access.policy.ServiceAccessPolicyManager`: defines the public interface for retrieving instances of `ServiceAccessPolicy`.
- `com.liferay.portal.kernel.security.service.access.policy.ServiceAccessPolicyManagerUtil`: bridges service access policy functionality to the parts of Liferay's core that have not yet been modularized.
- `com.liferay.portal.kernel.security.service.access.policy.ServiceAccessPolicyThreadLocal`: makes `ServiceAccessPolicy` instances active.

Liferay's Service Access Policy module resides in the
`modules/apps/service-access-policy` directory in Liferay's source code. In a
running Liferay instance, the service access policy functionality is provided by
these three bundles which you can find in the `[Liferay Home]/osgi/modules`
directory:

- `com.liferay.service.access.policy.api.jar`
- `com.liferay.service.access.policy.service.jar`
- `com.liferay.service.access.policy.web.jar`

These modules provide the service access policy management UI that's accessible
from the Control Panel. They also provide the interface and default
implementation for `ServiceAccessPolicy`.

To configure the Service Access Policy module, navigate to Liferay's Control
Panel, click on *Configuration Admin*, and find the *SAPConfiguration* module.
Click on its name to edit it. Here, you can edit the default service access
policy configuration. You can also force a default policy to be applied even
when no policies are applied by the `AuthVerifier`.

Liferay also contains an `AuthenticatedAccessControlPolicy`. This policy doesn't
do anything if a `ServiceAccessPolicyManager` implementation is present.
However, if the service access policy module is disabled, the
`AuthenticatedAccessControlPolicy` provides a fallback that still requires
authenticated access for web services.
