# Liferay Workspace [](id=liferay-workspace)

A *Liferay Workspace* is a generated environment that is built to hold and
manage your Liferay projects. This workspace is intended to aid in the
management of Liferay projects by providing various Gradle build scripts and
configured properties. This is the official way to create Liferay 7.0 modules
using Gradle. For those developers that still want to develop WAR-style plugins
using the Plugins SDK, this way is also supported using a Liferay Workspace.

Liferay Workspaces can be used in many different development environments, which
makes it flexible and applicable to many different developers. For example,
Liferay Workspace easily integrates with Liferay IDE, providing a seamless
development experience. To learn more about Liferay IDE and using workspace with
it, see
[Creating a Liferay Workspace with Liferay IDE](/develop/tutorials/-/knowledge_base/7-0/creating-a-liferay-workspace-with-liferay-ide)

Your workspace offers Gradle properties that you can modify to help manage the
generated folders. There are also some folders that aren't generated by
default, but can be manually created and set. This provides you the power to
customize your workspace's folder structure any way you'd like.

The top-level files/folder of a Liferay workspace are outlined below:

- `configs`: holds the configuration files for different environments. These
  files serve as your global configuration files for all Liferay servers and
  projects residing in your workspace.
- `gradle`: holds the Gradle Wrapper used by your workspace.
- `modules`: holds your custom modules.
- `themes`: holds your custom themes which are built using the Theme Generator.
- `build.gradle`
- `gradle.properties`
- `gradlew`
- `gradlew.bat`
- `settings.gradle`

The build/properties files included in your workspace's root directory sets your
workspace's Gradle properties and facilitates the build processes of your
modules.

Next you'll learn how to configure your Liferay workspace.

## Configuring Your Liferay Workspace [](id=configuring-your-liferay-workspace)

Before you begin using your workspace, it's a good practice to set your
workspace Gradle properties in the `gradle.properties` file. There are several
commented out properties in this file. These are the default properties set in
your workspace. If you'd like to change a variable, uncomment the variable and
set it to a custom value. For instance, if you want to store your modules in a
folder other than `[ROOT]/modules`, uncomment the
`liferay.workspace.modules.dir` variable and set it to a different value. You
can create Liferay modules with any build tool you like. For instance, Liferay
IDE provides an easy interface to configure a Liferay Workspace and create
modules using the workspace. For more information on this, see the 
[Creating a Liferay Workspace with Liferay IDE](/develop/tutorials/-/knowledge_base/7-0/creating-a-liferay-workspace-with-liferay-ide)
and
[Creating Modules with Liferay IDE](/develop/tutorials/-/knowledge_base/7-0/creating-modules-with-liferay-ide).

+$$$

**Note:** The workspace plugin automatically adds a multitude of subprojects for
you, which hides some complexities of Gradle. For example, a typical project's
`settings.gradle` file could contain many included subprojects like this:

    ...
    include images:base:oracle-jdk:oracle-jdk-6
    include images:base:oracle-jdk:oracle-jdk-7
    include images:base:oracle-jdk:oracle-jdk-8
    include images:base:liferay-portal:liferay-portal-ce-tomcat-7.0-ga1
    include images:source-bundles:glassfish
    include images:source-bundles:jboss-eap
    include images:source-bundles:tomcat
    include images:source-bundles:websphere
    include images:source-bundles:wildfly
    include compose:jboss-eap-mysql
    include compose:tomcat-mariadb
    include compose:tomcat-mysql
    include compose:tomcat-mysql-elastic
    include compose:tomcat-postgres
    include file-server
    ...

The workspace plugin provides these behind the scenes. Likewise, if a folder in
the `/themes` folder includes a `liferay-theme.json` file, the `gulp` plugin is
applied to it. If a folder in the `/modules` folder included a `bnd.bnd` file,
the `liferay-gradle` plugin is applied to it. Therefore, workspaces provides an
easier way to create and manage Gradle plugins. For more information on the
`liferay-gradle` plugin, see the
[Liferay Sample Modules](/develop/tutorials/-/knowledge_base/7-0/liferay-sample-modules)
tutorial.

$$$

Once you've developed and managed projects in your workspace, it could also be
usefuly to bundle your workspace into a ZIP or TAR file. This provides the
flexibility to distribute your workspace to potential consumers. To do this,
navigate to your workspace's root folder and run the following:

    .\gradlew distBundle[Zip|Tar]

Your distribution file is available from the workspace's `/build` directory.

Liferay Workspaces can also generate and hold a Liferay Server. This lets you
build/test your plugins against a running Liferay instance. Before generating a
Liferay instance, open the `gradle.properties` file located in your workspace's
root folder. There are several configurable properties for your workspace's
Liferay instance. For instance, you can set the version of Liferay you'd like to
generate and install (e.g., `7.0-ce-ga1`).

Once you've finalized your Gradle properties, navigate to your workspace's root
folder and run

    gradlew initBundle

As you read earlier, the workspace uses a Gradle wrapper to download and use
Gradle build tools. This command downloads the version of Liferay you specified
in your Gradle properties and installs your Liferay instance in the `bundles`
folder.

The Liferay Workspace is a great development environment for Liferay module
development; however, what if you'd like to also stick with developing WAR-style
applications? Liferay Workspace can handle that request too!

## Using a Plugins SDK from Your Workspace [](id=using-a-plugins-sdk-from-your-workspace)

Because @product@ 7.0 uses a module-based framework, the current structure of a
Liferay Workspace is centered around module development. There are still,
however, many situations where you must create WAR-style plugins using the
Plugins SDK. Because of this, your workspace can also work with the Plugins SDK.
When configuring your SDK in a workspace, you can take advantage of all the new
functionality workspaces provide and also use the SDK environment that you're
used to. To learn more about how to convert legacy applications to 7.0 modules
and what you should consider before making the jump, visit the
[Modularizing an Existing Portlet](/develop/tutorials/-/knowledge_base/7-0/modularizing-an-existing-portlet)
tutorial.

The Blade CLI offers a command that allows a Plugins SDK environment be
automatically generated with Liferay workspace. If you created your workspace
from scratch, however, and want to use a Plugins SDK, follow the instructions
below.

If you revisit your workspace's `gradle.properties` file, you'll notice the
Plugins SDK folder is set to `plugins-sdk`. This folder was not generated by
default, so you must create it yourself. In your workspace's root
folder, create the `plugins-sdk` folder. Then copy your legacy Plugins SDK
files into the `plugins-sdk` folder.

One last thing you must do to ensure the Plugins SDK works properly in the
context of your workspace is to generate all its requirements. These
requirements include the build JARs the Plugins SDK relies on to function
properly. To download the necessary requirements for your Plugins SDK, run the
following command from your workspace's root folder:

    gradlew tasks

Once the downloading is complete, your Plugins SDK is ready to use in your
workspace. It's as simple as that!
