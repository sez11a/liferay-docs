# Running Service Builder and Understanding the Generated Code

This tutorial explains how to run Service Builder and provides an overview of
the code that Service Builder generates. If you'd like to use Service Builder in
your application but haven't yet created a `service.xml` file, please see the
[Defining an Object-relational Map with Service Builder](https://dev.liferay.com/develop/tutorials/-/knowledge_base/6-2/defining-an-object-relational-map-with-service-builder)
tutorial.

## Running Service Builder

To build a service from a `service.xml` file, you can use *Liferay IDE*,
*Liferay Developer Studio*, or use a terminal window. Here, you'll find an
explanation of how to run Service Builder for the Event Listing example project
that's referenced throughout the Liferay Service Builder tutorials. You can find
the Event Listing example project on Github here:
[https://github.com/liferay/liferay-docs/tree/master/develop/tutorials/code/svc-build/event-listing-portlet](https://github.com/liferay/liferay-docs/tree/master/develop/tutorials/code/svc-build/event-listing-portlet).
If you'd like to experiment with this project, just copy it to the `portlets`
folder of your Plugins SDK. 

+$$$

**Note:** On Windows, your Liferay Portal instance and your Plugins SDK must be
on the same drive in order to build services. E.g., if your Liferay Portal
instance is on your `C:\` drive, your Plugins SDK must also be on your `C:\`
drive in order for Service Builder to be able to run successfully.

$$$

Now let's learn how to run Service Builder.

***Using Liferay IDE or Developer Studio:*** From the Package Explorer, open the
`service.xml` file from your `[plugin-project]/docroot/WEB-INF` folder. By
default, the file opens up in the Service Builder Editor. Make sure you are in
Overview mode. Then click the *Build Services* button near the top-right corner
of the view. The Build Services button has an image of a document with the
numerical sequence *010* in front of it. 

Make sure to click the *Build Services* button and not the *Build WSDD* button
that appears next to it. Building the WSDDs won't hurt anything, but you'll
generate files for the remote service instead of the local one. For information
about WSDDs (web service deployment descriptors), please refer to the
[Working with SOAP Web Services](https://dev.liferay.com/develop/tutorials/-/knowledge_base/6-2/working-with-soap-web-services)
tutorial. 

![Figure 1: The *Overview* mode in the editor provides a nested outline which you can expand, a form for editing basic Service Builder attributes, and buttons for building services or building web service deployment descriptors.](../../images/service-xml-overview.png)

Another simple way to run Service Builder is to right-click on your project's
name in the Package Explorer and then to select *Liferay* &rarr; *Build
Services* (or, equivalently, *Liferay* &rarr; *SDK* &rarr; *build-service*).

When you run Service Builder from Liferay IDE or Developer Studio, your IDE
generates a `build.[username].properties` file in your Plugins SDK, where
`[username]` is your operating system username. This file is used to specify the
location of a Liferay instance. Your Plugins SDK needs to be configured with the
location of a Liferay instance since it needs to compile your code against
classes on Liferay's classpath. Here's a sample `build.[username].properties`
file generated by Liferay IDE:

    #Managed by Liferay IDE (remove this comment to prevent future updates)
    #Wed Jan 21 17:45:20 EST 2015
    app.server.tomcat.lib.global.dir = [...]/liferay-portal-[version]/tomcat-7.0.42/lib/ext
    app.server.tomcat.deploy.dir = [...]/liferay-portal-[version]/tomcat-7.0.42/webapps
    app.server.parent.dir = [...]/liferay-portal-[version]
    app.server.tomcat.dir = [...]/liferay-portal-[version]/tomcat-7.0.42
    app.server.type = tomcat
    app.server.tomcat.portal.dir = [...]/liferay-portal-[version]/tomcat-7.0.42/webapps/ROOT

After running Service Builder, the Plugins SDK prints messages listing the
generated files and a message stating `BUILD SUCCESSFUL`. More information about
the generated files appears below.

***Using the terminal:*** Open a terminal window and navigate to your Plugins
SDK directory. If a `build.[username].properties` does not exist in your Plugins
SDK directory, create one. Don't edit the `build.properties` file itself. Your
`build.[username].properties` file can override any of the properties specified
in the `build.properties` file. In your `build.[username].properties` file, add
at least the following line:

    app.server.parent.dir = [...]/liferay-portal-[version]

If you're using a Liferay Tomcat bundle, it's usually not necessary to override
all of the properties that Liferay IDE and Developer Studio override. Specifying
the value of the `app.server.parent.dir` property suffices as long you haven't
changed the relative locations of the `app.server.tomcat.*` directories.

+$$$

**Tip:** One potentially useful property that's not automatically configured by
Liferay IDE or Developer Studo is the `auto.deploy.dir` property. By default,
`auto.deploy.dir=${app.server.parent.dir}/deploy`. This property specifies
Liferay's auto-deploy directory, i.e., the directory into which the Plugins SDK
will copy plugins (WAR files) to be deployed. Liferay modifies the WAR files
before deploying and exploding them to the `app.server.tomcat.deploy.dir`
directory. If you customize the value of the `auto.deploy.dir` property in your
Plugins SDK, make sure you also configure Liferay to scan the new directory. To
do so, you must configure Liferay's `auto.deploy.deploy.dir` portal property to
point to the same directory that you specified via the `auto.deploy.dir`
property of your Plugins SDK's `build.[username].properties` file.

$$$

When you've finished configuring your `build.[username].properties` file,
navigate to your `portlets/event-listing-project-portlet` directory and enter
this command:

    ant build-service

When the service has been successfully generated, a `BUILD SUCCESSFUL` message
appears in your terminal window. You should also see that a large number of
files have been generated in your project. These files include a model layer,
service layer, and persistence layer. Don't worry about the number of generated
files--developers never have to customize more than three of them. To review the
code that Service Builder generates for your entities, see the next section.

## Understanding the Code Generated by Service Builder

