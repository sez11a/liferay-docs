# Using Login Screenlet for Authentication [](id=using-login-screenlet-for-authentication)

For the app to retrieve data from the guestbook portlet, the app's user must 
first authenticate with the portal. Authenticating with the Liferay Mobile SDK 
is possible but it takes time to implement. Implementing authentication with 
Liferay Screens takes about ten minutes. In this article, you'll use Login 
Screenlet to implement authentication in your app. 

## Adding Login Screenlet to the App [](id=adding-login-screenlet-to-the-app)

You first need to add Login Screenlet's XML to the main activity's layout. Open 
`activity_main.xml` and delete the `TextView` generated by Android Studio when 
you created the project. Insert the following code in its place:

    <com.liferay.mobile.screens.auth.login.LoginScreenlet
        android:id="@+id/login_screenlet"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        liferay:basicAuthMethod="screen_name"
        liferay:layoutId="@layout/login_default"
        />

When prompted by Android Studio, add the following XML namespace to the top of 
the file:

    xmlns:liferay="http://schemas.android.com/apk/res-auto"

Note the two `liferay` attributes in the Login Screenlet's XML. The 
`liferay:basicAuthMethod` attribute tells the Screenlet to use basic 
authentication instead of OAuth. Its value, `screen_name`, tells the Screenlet 
to authenticate with the user's screen name. You can alternatively set this to 
`email` or `userId`. This Learning Path uses `screen_name` only because it's 
much faster to type a screen name than a full email address when authenticating 
in the emulator. Also, note that this value must match the authentication 
setting in the portal. By default, Liferay Portal uses email address for 
authentication. You need to set your portal to authenticate by screen name 
instead. See 
[this section in Login Screenlet's reference documentation](/develop/reference/-/knowledge_base/6-2/loginscreenlet-for-android#basic-authentication) 
for instructions on changing your portal's authentication setting. 

The second `liferay` attribute in Login Screenlet's XML is `liferay:layoutId`. 
This attribute sets the View to display the Screenlet with. The value 
`@layout/login_default` specifies the Default view. For more information on 
Views in Liferay Screens, see 
[this tutorial](/develop/tutorials/-/knowledge_base/6-2/using-views-in-android-screenlets). 
For more information on Login Screenlet's available attributes, see its 
[reference documentation](/develop/reference/-/knowledge_base/6-2/loginscreenlet-for-android). 

Next, open the `MainActivity` class and change its declaration to implement 
`LoginListener`. The class declaration should now appear as follows:

    public class MainActivity extends AppCompatActivity implements LoginListener {...

Implementing `LoginListener` requires you to implement two methods: 
`onLoginSuccess` and `onLoginFailure`. Add them to the class as follows:

    @Override
    public void onLoginSuccess(User user) {
        Toast.makeText(this, "Login successful!", Toast.LENGTH_SHORT).show();
    }
    
    @Override
    public void onLoginFailure(Exception e) {
        Toast.makeText(this, "Couldn't log in " + e.getMessage(), Toast.LENGTH_LONG).show();
    }

These are listener methods called, respectively, when login succeeds or fails. 
Using them lets your app respond to events that occur in the Screenlet. For the 
moment, they each only do one thing: display a success or failure message to the 
user. You'll change this shortly. Note that each Screenlet has different 
listener methods; they're listed in the Screenlet 
[reference documentation](/develop/reference/-/knowledge_base/6-2/screenlets-in-liferay-screens-for-android). 

Now you need to get a reference to the Screenlet and set the `MainActivity` 
class as its listener. To do so, add the following code to the end of the 
`onCreate` method: 

    LoginScreenlet loginScreenlet = (LoginScreenlet) findViewById(R.id.login_screenlet);
    loginScreenlet.setListener(this);

The `findViewById` method uses the Screenlet's ID from the layout to create the 
reference. The `setListener` method then sets the `MainActivity` class as the 
Login Screenlet's listener. 

If you added the imports as prompted by Android Studio when you added the above 
code, you should now have the following additional imports in your 
`MainActivity` class. If you don't, add them now to resolve any errors: 

    import com.liferay.mobile.screens.auth.login.LoginListener;
    import com.liferay.mobile.screens.auth.login.LoginScreenlet;
    import com.liferay.mobile.screens.context.User;
    import android.widget.Toast;

You should also remove any unused imports. Now run the app by clicking the green 
*play* button in the toolbar, or by selecting *Run 'app'* from the *Run* menu. 
Unlock the emulator once it launches. Your app then automatically opens to the 
Login Screenlet. Enter your credentials and click *SIGN IN*. The toast message 
then pops up saying that the login succeeded. 

![Figure 1: Login Screenlet successfully authenticated you with the portal.](../../images/android-login-screenlet-success.png)

The toast message goes away and you remain on the login screen. Nothing else 
happens. Don't worry, this is supposed to happen; you haven't added any other 
functionality yet. You'll fix this next. 

## Navigating from Login Screenlet [](id=navigating-from-login-screenlet)

In project view, right click the package `com.liferay.docs.liferayguestbook` and 
select *New* &rarr; *Activity* &rarr; *Navigation Drawer Activity* to launch the 
New Android Activity wizard. This is the same wizard you used to create an empty 
activity during project creation. Name the activity `GuestbooksActivity`, accept the 
default values for the remaining fields, and click *Finish*. After Android 
Studio creates the activity, the `GuestbooksActivity` class and 
`content_guestbooks.xml` layout open in the editor. Close them. You don't need 
to edit these files yet.

Now you need for the app to open this new activity when login succeeds. You'll 
do this by using an *intent* in the `onLoginSuccess` method of `MainActivity`. 
In short, Android intents are messaging objects that you can use to launch other 
activities. For more information, see 
[this guide on intents in Android's documentation](http://developer.android.com/guide/components/intents-filters.html). 
To launch `GuestbooksActivity` when login succeeds, replace the contents of 
`onLoginSuccess` with the following code: 

    Intent intent = new Intent(this, GuestbooksActivity.class);
    startActivity(intent);

When login succeeds, this code creates an `Intent` and uses it to start 
`GuestbooksActivity`. If you haven't already, make sure you add the following 
import to `MainActivity`:

    import android.content.Intent;

Now you're ready to see the intent in action! Run the app in the emulator and 
log in when prompted. When login succeeds, the new activity opens. 

![Figure 2: The app takes you to the new activity after you log in.](../../images/android-login-success-intent.png)

Nice work! You've successfully implemented portal authentication in the Android 
app. It didn't take you that long, either. All the app does though is log in to 
the portal; it doesn't display any portal content. You'll take care of this 
next.
